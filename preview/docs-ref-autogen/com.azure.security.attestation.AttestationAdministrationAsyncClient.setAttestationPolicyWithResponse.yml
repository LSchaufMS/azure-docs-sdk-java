### YamlMime:JavaMember
uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse*"
fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse"
name: "setAttestationPolicyWithResponse"
nameWithType: "AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse"
members:
- uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions)"
  fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  name: "setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  nameWithType: "AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  summary: "Sets the current policy for an attestation type. Setting the attestation requires that the caller provide an <xref uid=\"com.azure.security.attestation.models.AttestationPolicySetOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationPolicySetOptions\"></xref> object which provides the options for setting the policy. There are two major components to a setPolicy request:\n\n *  The policy to set\n *  A signing key used to sign the policy sent to the service (OPTIONAL)\n\nOn Isolated mode attestation instances, the signing key MUST include one of the configured policy signing certificates.\n\n```java\nMono<Response<PolicyResult>> resultWithResponseMono = client.setAttestationPolicyWithResponse(AttestationType.OPEN_ENCLAVE,\n     new AttestationPolicySetOptions()\n         .setAttestationPolicy(policyToSet)\n         .setAttestationSigner(new AttestationSigningKey(certificate, privateKey)));\n Response<PolicyResult> response = resultWithResponseMono.block();\n```"
  parameters:
  - description: "Specifies the trusted execution environment to be used to validate the evidence."
    name: "attestationType"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationType?alt=com.azure.security.attestation.models.AttestationType&text=AttestationType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options for the setPolicy operation."
    name: "options"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationPolicySetOptions?alt=com.azure.security.attestation.models.AttestationPolicySetOptions&text=AttestationPolicySetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PolicyResult>> setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  returns:
    description: "the response to an attestation policy operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.PolicyResult?alt=com.azure.security.attestation.models.PolicyResult&text=PolicyResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,java.lang.String)"
  fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(AttestationType attestationType, String newAttestationPolicy)"
  name: "setAttestationPolicyWithResponse(AttestationType attestationType, String newAttestationPolicy)"
  nameWithType: "AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(AttestationType attestationType, String newAttestationPolicy)"
  summary: "Sets the current policy for an attestation type with an unsecured attestation policy.\n\nNote that this API will only work on AAD mode attestation instances, because it sets the policy using an unsecured attestation token.\n\n```java\nMono<Response<PolicyResult>> resultWithResponseMono = client.setAttestationPolicyWithResponse(\n     AttestationType.OPEN_ENCLAVE, \"version=1.0; authorizationrules{=> permit();}; issuancerules{};\");\n Response<PolicyResult> response = resultWithResponseMono.block();\n```"
  parameters:
  - description: "Specifies the trusted execution environment to be used to validate the evidence."
    name: "attestationType"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationType?alt=com.azure.security.attestation.models.AttestationType&text=AttestationType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the policy to be set on the instance."
    name: "newAttestationPolicy"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PolicyResult>> setAttestationPolicyWithResponse(AttestationType attestationType, String newAttestationPolicy)"
  returns:
    description: "the response to an attestation policy operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.PolicyResult?alt=com.azure.security.attestation.models.PolicyResult&text=PolicyResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.0.0-alpha.20211201.1

### YamlMime:JavaMember
uid: "com.azure.security.attestation.AttestationAsyncClient.attestOpenEnclaveWithResponse*"
fullName: "com.azure.security.attestation.AttestationAsyncClient.attestOpenEnclaveWithResponse"
name: "attestOpenEnclaveWithResponse"
nameWithType: "AttestationAsyncClient.attestOpenEnclaveWithResponse"
members:
- uid: "com.azure.security.attestation.AttestationAsyncClient.attestOpenEnclaveWithResponse(com.azure.core.util.BinaryData)"
  fullName: "com.azure.security.attestation.AttestationAsyncClient.attestOpenEnclaveWithResponse(BinaryData report)"
  name: "attestOpenEnclaveWithResponse(BinaryData report)"
  nameWithType: "AttestationAsyncClient.attestOpenEnclaveWithResponse(BinaryData report)"
  summary: "Attest an OpenEnclave report.\n\nThis method is a convenience method which attests evidence from an OpenEnclave enclave with no `RuntimeData` or `InitTimeData`.\n\nThe `report` is generated via the [``oe\\_get\\_report\\}][oe_get_report].\n\nIt returns an <xref uid=\"com.azure.security.attestation.models.AttestationResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationResult\"></xref> containing the claims emitted by the attestation service.\n\n```java\nMono<AttestationResult> resultWithReport = client.attestOpenEnclave(openEnclaveReport);\n```\n\n\n[oe_get_report]: https://openenclave.github.io/openenclave/api/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html"
  parameters:
  - description: "- OpenEnclave report to attest."
    name: "report"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AttestationResult>> attestOpenEnclaveWithResponse(BinaryData report)"
  returns:
    description: "the result of an attestation operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.AttestationResult?alt=com.azure.security.attestation.models.AttestationResult&text=AttestationResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.attestation.AttestationAsyncClient.attestOpenEnclaveWithResponse(com.azure.security.attestation.models.AttestationOptions)"
  fullName: "com.azure.security.attestation.AttestationAsyncClient.attestOpenEnclaveWithResponse(AttestationOptions options)"
  name: "attestOpenEnclaveWithResponse(AttestationOptions options)"
  nameWithType: "AttestationAsyncClient.attestOpenEnclaveWithResponse(AttestationOptions options)"
  summary: "Attest an OpenEnclave report, specifying RunTimeData and InitTimeData. The <xref uid=\"com.azure.security.attestation.models.AttestationOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions\"></xref> parameter allows the caller to specify the OpenEnclave `report` which contains evidence from the enclave, and runtime data which allows the enclave to specify additional data from within the enclave. When calling the <xref uid=\"com.azure.security.attestation.models.AttestationOptions.setRunTimeData(com.azure.security.attestation.models.AttestationData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions#setRunTimeData(AttestationData)\"></xref> API, the caller can specify whether the attestation service should treat the runtime data as binary or as JSON when it is included in the response attestation token.\n\n**Attest an OpenEnclave enclave with attestation options.**\n\n```java\nMono<Response<AttestationResult>> openEnclaveResponse = client.attestOpenEnclaveWithResponse(new AttestationOptions(openEnclaveReport)\n     .setRunTimeData(new AttestationData(runtimeData, AttestationDataInterpretation.JSON)), Context.NONE);\n```"
  parameters:
  - description: "Attestation options for attesting SGX enclaves."
    name: "options"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationOptions?alt=com.azure.security.attestation.models.AttestationOptions&text=AttestationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AttestationResult>> attestOpenEnclaveWithResponse(AttestationOptions options)"
  returns:
    description: "the result of an attestation operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.AttestationResult?alt=com.azure.security.attestation.models.AttestationResult&text=AttestationResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.0.0-alpha.20211201.1

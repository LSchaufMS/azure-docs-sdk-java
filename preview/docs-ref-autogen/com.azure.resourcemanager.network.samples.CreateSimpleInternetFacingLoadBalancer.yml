### YamlMime:JavaType
uid: "com.azure.resourcemanager.network.samples.CreateSimpleInternetFacingLoadBalancer"
fullName: "com.azure.resourcemanager.network.samples.CreateSimpleInternetFacingLoadBalancer"
name: "CreateSimpleInternetFacingLoadBalancer"
nameWithType: "CreateSimpleInternetFacingLoadBalancer"
summary: "Azure Network sample for creating a simple Internet facing load balancer -\n\nSummary ...\n\n\\- This sample creates a simple Internet facing load balancer that receives network traffic on port 80 and sends load-balanced traffic to two virtual machines\n\nDetails ...\n\n1. Create two virtual machines for the backend... - in the same availability set - in the same virtual network\n\nCreate an Internet facing load balancer with ... - A public IP address assigned to an implicitly created frontend - One backend address pool with the two virtual machines to receive HTTP network traffic from the load balancer - One load balancing rule for HTTP to map public ports on the load balancer to ports in the backend address pool\n\nDelete the load balancer"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CreateSimpleInternetFacingLoadBalancer"
methods:
- "com.azure.resourcemanager.network.samples.CreateSimpleInternetFacingLoadBalancer.main(java.lang.String[])"
- "com.azure.resourcemanager.network.samples.CreateSimpleInternetFacingLoadBalancer.runSample(com.azure.resourcemanager.AzureResourceManager)"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.network.samples"
artifact: com.azure.resourcemanager:azure-resourcemanager-samples:2.0.0-alpha.20211130.3

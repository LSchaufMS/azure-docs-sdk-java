### YamlMime:JavaType
uid: "com.azure.resourcemanager.containerinstance.samples.ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator"
fullName: "com.azure.resourcemanager.containerinstance.samples.ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator"
name: "ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator"
nameWithType: "ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator"
summary: "Azure Container Instance sample for managing container instances. - Create an Azure Container Registry to be used for holding private Docker container images - If a local Docker engine cannot be found, create a Linux virtual machine that will host a Docker engine to be used for this sample - Use Docker Java to create a Docker client that will push/pull an image to/from Azure Container Registry - Pull a test image from the public Docker repo (tomcat:8) to be used as a sample for pushing/pulling to/from an Azure Container Registry - Create an Azure container group with a container instance using the container image that was pushed to the container registry created above - Test that the container app can be reached via \"curl\" like HTTP GET calls - Retrieve container log content - Create a SSH private/public key to be used when creating a container service - Create an Azure Container Service with Kubernetes orchestration - Log in via the SSH client and download the Kubernetes config - Create a Kubernetes client using the Kubernetes config file downloaded from one of the virtual machine managers - Create a Kubernetes namespace - Create a Kubernetes secret of type \"docker-registry\" using the Azure Container Registry credentials from above - Create a Kubernetes replication controller using a container image from the Azure private registry from above and a load balancer service that will expose the app to the world"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator"
constructors:
- "com.azure.resourcemanager.containerinstance.samples.ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator.ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator()"
methods:
- "com.azure.resourcemanager.containerinstance.samples.ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator.main(java.lang.String[])"
- "com.azure.resourcemanager.containerinstance.samples.ManageContainerInstanceZeroToOneAndOneToManyUsingContainerServiceOrchestrator.runSample(com.azure.resourcemanager.AzureResourceManager,java.lang.String,java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.containerinstance.samples"
artifact: com.azure.resourcemanager:azure-resourcemanager-samples:2.0.0-alpha.20211130.3
